generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String                 @unique
  name                  String?
  image                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isSubscribed          Boolean                @default(false)
  subscriptionEndDate   DateTime?
  lastLoginAt           DateTime?
  clerkId               String                 @unique
  roleId                String                 @default("USER")
  role                  UserRole               @relation(fields: [roleId], references: [id])
  watchedVideos         WatchedVideo[]
  orders                Order[]
  taughtWorkshops       Workshop[]             @relation("InstructorWorkshops")
  workshopRegistrations WorkshopRegistration[]
  favorites             Favorite[]
}

model UserRole {
  id    String @id
  label String
  users User[]
}

model Video {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  videoId       String         @unique
  title         String?
  description   String?
  uploadDate    DateTime       @default(now())
  price         Float?
  category      VideoCategory?
  thumbnail     String?
  watchedVideos WatchedVideo[]
}

model WatchedVideo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  watchedAt DateTime @default(now())
  progress  Float
  videoId   String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}

model Document {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentId  String   @unique
  title       String?
  description String?
  uploadDate  DateTime @default(now())
  price       Float?
  bucketUrl   String
}

model Workshop {
  id            String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  price         Float?
  locationOrUrl String?
  status        WorkshopStatus         @default(RECRUITING)
  instructorId  String                 @db.Uuid
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  thumbnail     String?
  instructor    User                   @relation("InstructorWorkshops", fields: [instructorId], references: [id])
  registrations WorkshopRegistration[]
}

model WorkshopRegistration {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  workshopId   String   @db.Uuid
  registeredAt DateTime @default(now())
  attended     Boolean  @default(false)
  orderId      String?  @db.Uuid
  order        Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workshop     Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade)

  @@unique([userId, workshopId])
}

model Order {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String?                @db.Uuid
  totalAmount           Float
  status                OrderStatus            @default(PENDING)
  stripePaymentIntentId String?                @unique
  stripeInvoiceId       String?                @unique
  stripeInvoiceUrl      String?
  orderedAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  user                  User?                  @relation(fields: [userId], references: [id], onDelete: SetNull)
  items                 OrderItem[]
  workshopRegistrations WorkshopRegistration[]
}

model OrderItem {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId         String   @db.Uuid
  priceAtPurchase Float
  quantity        Int      @default(1)
  itemId          String
  itemType        ItemType
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  itemId    String
  itemType  ItemType
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemType, itemId])
}

model Image {
  id        String   @id @default(uuid())
  fileName  String
  url       String
  createdAt DateTime @default(now())
}

enum WorkshopStatus {
  RECRUITING
  CLOSED
  ONGOING
  COMPLETED
}

enum VideoCategory {
  INTERVIEW
  RESUME
  NETWORKING
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum ItemType {
  VIDEO
  DOCUMENT
  WORKSHOP
}
